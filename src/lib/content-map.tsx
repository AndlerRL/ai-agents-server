import type { ReactNode } from 'react'

// Centralized content map for both client and server
export const contentMap: Record<string, ReactNode> = {
	'/': `ðŸ¤– Welcome to the AI Agents Server

A sophisticated agentic AI platform with:
â€¢ Multi-model LLM support (OpenAI, extensible)
â€¢ Real-time WebSocket event streaming
â€¢ Intelligent memory management with chunking
â€¢ Tool registry and execution framework
â€¢ Dependency injection architecture

Pick your API interface:
1. ðŸ§  OpenAI Agents API (/v1/openai/)
2. âš¡ Vercel AI SDK API (/v1/vercel/)
3. ðŸ”— WebSocket Events (/webhooks/)
4. ðŸ“Š Management Dashboard (/dashboard/)

Quick Start:
- API Documentation: /swagger
- Health Check: /health
- WebSocket: ws://localhost:3000/ws`,

	'/v1/openai/': `ðŸ§  OpenAI Agents API Dashboard

Advanced AI agent management with GPT-4 and GPT-3.5 Turbo integration.

Features:
â€¢ Agent lifecycle management
â€¢ Chat completions with context
â€¢ Tool integration and execution
â€¢ Memory persistence and search
â€¢ Real-time event streaming

Available Endpoints:
â€¢ POST /agents - Create new agent
â€¢ GET /agents - List all agents
â€¢ POST /chat/completions - Send messages
â€¢ GET /tools - List available tools
â€¢ GET /models - List OpenAI models

Event Types:
â€¢ agent.created, agent.processing
â€¢ agent.completed, agent.error
â€¢ tool.executed, memory.updated`,

	'/v1/vercel/': `âš¡ Vercel AI SDK API Dashboard

Next-generation AI SDK integration with streaming capabilities.

ðŸš§ Coming Soon - Expansion Points:
â€¢ Streaming text generation
â€¢ Multi-provider model support
â€¢ Function calling with tools
â€¢ Real-time response streaming
â€¢ Embedding generation

Planned Integration:
â€¢ @ai-sdk/openai
â€¢ @ai-sdk/anthropic  
â€¢ @ai-sdk/google
â€¢ Custom provider support

This is designed as an extension point for future
Vercel AI SDK integration with minimal refactoring.`,

	'/webhooks/': `ðŸ”— Webhook & Event Streaming

Real-time event broadcasting via WebSocket connections.

Features:
â€¢ WebSocket connection management
â€¢ Event filtering and subscriptions
â€¢ Message persistence and buffering
â€¢ Heartbeat and health monitoring
â€¢ Custom event broadcasting

Event Types:
â€¢ agent.* - Agent lifecycle events
â€¢ tool.executed - Tool execution results
â€¢ memory.updated - Memory store changes
â€¢ conversation.* - Chat session events

WebSocket URL: ws://localhost:3000/ws
Connection limit: 1000 concurrent
Buffer size: 100 events`,

	'/dashboard/': `ðŸ“Š Management Dashboard

Comprehensive server monitoring and administration.

Statistics:
â€¢ Server health and performance
â€¢ Agent status and metrics
â€¢ Memory usage and optimization
â€¢ WebSocket connection tracking
â€¢ API call analytics

Management:
â€¢ Agent overview and control
â€¢ Tool registry inspection
â€¢ Memory store statistics
â€¢ System logs and debugging
â€¢ Cleanup and maintenance

Actions:
â€¢ Inactive agent cleanup
â€¢ Memory optimization
â€¢ Connection management
â€¢ System restart (placeholder)`
}

// Helper function to get content with a fallback
export function getContent(
	path: string,
	fallback: ReactNode = 'Welcome to the AI Agents Server - A sophisticated agentic AI platform.',
): ReactNode {
	return contentMap[path] || fallback
}
